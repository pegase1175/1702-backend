DROP PROCEDURE PS_EXT_VESSEL_TRACK;
DROP PROCEDURE PS_USER_RIGHT;
DROP PROCEDURE PS_USER_LOG_ACTION;
DELIMITER | -- Facultatif si votre d√©limiteur est toujours |
CREATE PROCEDURE PS_EXT_VESSEL_TRACK (IN mmsi INT, IN FromDate TIMESTAMP, IN ToDate TIMESTAMP, IN MinLat FLOAT UNSIGNED, IN MaxLat FLOAT UNSIGNED, IN MinLong FLOAT UNSIGNED, IN MaxLong FLOAT UNSIGNED)
BEGIN

IF MinLat<>0 THEN
	SELECT *
	FROM t_vessel_track_vtr
	WHERE VTR_MMSI_ID=mmsi AND VTR_DATE BETWEEN FromDate AND ToDate
	AND VTR_LAT BETWEEN MinLat AND MaxLat
	AND VTR_LONG BETWEEN MinLong AND MaxLong;
ELSE
	SELECT *
	FROM t_vessel_track_vtr
	WHERE VTR_MMSI_ID=mmsi AND VTR_DATE BETWEEN FromDate AND ToDate;
END IF;

END|

CREATE PROCEDURE PS_USER_RIGHT (IN ipUser VARCHAR(16))
BEGIN
  DECLARE nbUse INT;

  IF NOT EXISTS (SELECT USR_ID FROM TR_USER_USR WHERE USR_IP=ipUser) THEN
    INSERT INTO TR_USER_USR (USR_IP) VALUES (ipUser);
    SELECT 1 AS AUTH, @@IDENTITY AS USR_ID;
  ELSE
    SELECT
      CASE WHEN COUNT(*)>=tr_user_usr.USR_NBUSE THEN 0 ELSE 1 END AS AUTH,
      tr_user_usr.USR_ID AS USR_ID
    FROM
	  tr_user_usr
	  left outer JOIN t_user_track_utr ON (
		t_user_track_utr.USR_ID = tr_user_usr.USR_ID
		AND t_user_track_utr.UTR_DTVISIT BETWEEN DATE_ADD(NOW(), INTERVAL -1 HOUR) AND NOW()
		)
    WHERE
      tr_user_usr.USR_IP=ipUser;
  END IF;

END|

CREATE PROCEDURE PS_USER_LOG_ACTION (IN idUser INT)
BEGIN

  IF EXISTS (SELECT USR_ID FROM TR_USER_USR WHERE USR_ID=idUser) THEN
    INSERT INTO t_user_track_utr (USR_ID, UTR_DTVISIT) VALUES (idUser, NOW());
    SELECT 1 AS AUTH, @@IDENTITY AS USR_ID;
  END IF;

END|

DELIMITER ;